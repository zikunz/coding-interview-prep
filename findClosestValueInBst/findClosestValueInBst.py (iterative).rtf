{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf840
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Time Complexity: O(N), where N represents number of nodes in the BST\
# Space Complexity: O(1)\
\
def findClosestValueInBst(tree, target):\
	currNode = tree\
	closest = float('inf')\
	\
    while currNode is not None:\
		if abs(currNode.value - target) < abs(closest - target):\
			closest = currNode.value\
		\
		if target > currNode.value:\
			currNode = currNode.right\
		elif target < currNode.value:\
			currNode = currNode.left\
		else:\
			break;\
			\
	return closest\
\
# This is the class of the input tree. Do not edit.\
class BST:\
    def __init__(self, value):\
        self.value = value\
        self.left = None\
        self.right = None}